AWSTemplateFormatVersion: "2010-09-09"
Description: "get activemq each topic count"
Parameters:
  LambdaVersion:
    Description: "LambdaFunction Version"
    Type: String
    Default: ""
  BrokerUserName:
    Description: "Enter username to connect mq"
    Type: String
    Default: "mq_user_name"
  BrokerPassword:
    Description: "Enter the password to connect mq broker"
    Type: String
    Default: "mq_password"
  SendToEmail:
    Description: "Send To Email for Notification"
    Type: String
    Default: "njaiswal@cogitocorp.com"
  ClientName:
    Description: "enter the client name"
    Type: String
    Default: ""
  LambdaBucketName:
    Description: "Name of S3 Bucket for where Lambda function zip files are uploaded"
    Type: String
    Default: "stage-cogito-lambda-bucket"
    MinLength: 3
Resources:
  Lambdarole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ses.amazonaws.com
            Action: sts:AssumeRole
      RoleName: active-mq-list-lambda-role
      Policies:
        - PolicyName: Active-Mq-List-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:*
                  - mq:*
                  - ses:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: activemq.lambda_handler
      FunctionName: ActiveMQ_list 
      Description: "list activemq and send notification"
      Role: !GetAtt Lambdarole.Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key:  Amq_List_Broker.zip
      VpcConfig:
         SecurityGroupIds: [sg-003401576ce8c592d,sg-0efb09e99fadd0f89]
         SubnetIds: [subnet-09a108e8c78ea69aa,subnet-0d5be8a4cb56c15c9]
      Environment:
        Variables:
          SendToEmail: !Ref SendToEmail
          client_Name : !Ref ClientName
          broker_userName: !Ref BrokerUserName
          broker_Password: !Ref BrokerPassword
      Runtime: python3.7
      Timeout: 300
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule to execute Lambda"
      ScheduleExpression: "cron(0 1 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: TargetFunctionV1
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: ActiveMQ_list 
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn
Outputs: {}
